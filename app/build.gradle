apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def config = rootProject.ext.android

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        ndk {
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
//        }
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        emulate {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "book_v${variant.versionName}.apk"
            }
        }
    }
    sourceSets {
        main {
            if (isModuleRun.toBoolean()) {
                manifest.srcFile('src/main/debug/AndroidManifest.xml')
            } else {
                manifest.srcFile('src/main/AndroidManifest.xml')
                java {
                    //release 时 debug 目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    aaptOptions {
        cruncherEnabled = false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

if (!isModuleRun.toBoolean()) {
    //获取当前运行的task
    def tasks = project.gradle.startParameter.taskNames
    for (String task : tasks) {
        def upperName = task.toUpperCase()
        //判断task是编译器还是运行期
        if (upperName.contains("ASSEMBLE") || upperName.contains("INSTALL")) {
            dependencies.add("implementation", project.project(':' + 'minemodule'))
            dependencies.add("implementation", project.project(':' + 'sortmodule'))
            dependencies.add("implementation", project.project(":" + 'loginmodule'))
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation project(':routermodule')
}
